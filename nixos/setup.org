* NixOS setup
:PROPERTIES:
:HEADER-ARGS: :tangle yes
:END:

This document outlines my NixOS setup. Setup scripts are generated by tangling
it with =org-babel=.

** Configuration

Here's a bunch of variables that can be tweaked to change the setup process:

#+begin_src sh
DISK=/dev/sda
BOOT_SIZE=512MiB
SWAP_SIZE=2GiB
#+end_src

** Partitioning

Create a GPT partition table.

#+begin_src sh
parted $DISK -- mklabel gpt
#+end_src

Add the root partition. This will fill the disk except for the end part, where
the swap will live, and the space left in front which will be used by the boot
partition.

#+begin_src sh
parted $DISK -- mkpart primary $BOOT_SIZE -$SWAP_SIZE
#+end_src

Add a swap partition.

#+begin_src sh
parted $DISK -- mkpart primary linux-swap -$SWAP_SIZE 100%
#+end_src

Finally, add the boot partition. NixOS by default uses the ESP (EFI system
partition) as its /boot partition. It uses the initially reserved space at the
start of the disk.

#+begin_src sh
parted $DISK -- mkpart ESP fat32 1MiB $BOOT_SIZE
parted $DISK -- set 3 boot on
#+end_src

** Formatting

For initialising Ext4 partitions: =mkfs.ext4=. I assign a unique symbolic label to
the file system using the option =-L label=, since this makes the file system
configuration independent from device changes.

#+begin_src sh
mkfs.ext4 -L root ${DISK}1
#+end_src

For creating swap partitions: =mkswap=. I again assign a label to the swap
partition with =-L label=.

#+begin_src sh
mkswap -L swap ${DISK}2
#+end_src

For creating (UEFI) boot partitions: =mkfs.fat=. I again assign a label to the
boot partition with =-n label=.

#+begin_src sh
mkfs.fat -F 32 -n boot ${DISK}3
#+end_src

** Mounting

Mount the target file system on which NixOS should be installed on =/mnt=, in this
case on the =root= partition.

#+begin_src sh
mount /dev/disk/by-label/root /mnt
#+end_src

Mount the boot file system on =/mnt/boot=.

#+begin_src sh
mkdir -p /mnt/boot
mount /dev/disk/by-label/boot /mnt/boot
#+end_src

Just in case the machine has a limited amount of memory, activate swap
devices. The installer (or rather, the build actions that it may spawn) may need
quite a bit of RAM, depending on the configuration.

#+begin_src sh
swapon ${DISK}2
#+end_src

* File local variables                                                :noexport:
# Local variables:
# after-save-hook: (lambda () 
#                    (org-babel-tangle))
# End:
